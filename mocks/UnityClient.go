// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gounity "github.com/dell/gounity"

	mock "github.com/stretchr/testify/mock"

	types "github.com/dell/gounity/apitypes"
)

// UnityClient is an autogenerated mock type for the UnityClient type
type UnityClient struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, configConnect
func (_m *UnityClient) Authenticate(ctx context.Context, configConnect *gounity.ConfigConnect) error {
	ret := _m.Called(ctx, configConnect)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gounity.ConfigConnect) error); ok {
		r0 = rf(ctx, configConnect)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BasicSystemInfo provides a mock function with given fields: ctx, configConnect
func (_m *UnityClient) BasicSystemInfo(ctx context.Context, configConnect *gounity.ConfigConnect) error {
	ret := _m.Called(ctx, configConnect)

	if len(ret) == 0 {
		panic("no return value specified for BasicSystemInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gounity.ConfigConnect) error); ok {
		r0 = rf(ctx, configConnect)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopySnapshot provides a mock function with given fields: ctx, sourceSnapshotID, name
func (_m *UnityClient) CopySnapshot(ctx context.Context, sourceSnapshotID string, name string) (*types.Snapshot, error) {
	ret := _m.Called(ctx, sourceSnapshotID, name)

	if len(ret) == 0 {
		panic("no return value specified for CopySnapshot")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.Snapshot, error)); ok {
		return rf(ctx, sourceSnapshotID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Snapshot); ok {
		r0 = rf(ctx, sourceSnapshotID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sourceSnapshotID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloneFromVolume provides a mock function with given fields: ctx, name, volID
func (_m *UnityClient) CreateCloneFromVolume(ctx context.Context, name string, volID string) (*types.Volume, error) {
	ret := _m.Called(ctx, name, volID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloneFromVolume")
	}

	var r0 *types.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.Volume, error)); ok {
		return rf(ctx, name, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Volume); ok {
		r0 = rf(ctx, name, volID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFilesystem provides a mock function with given fields: ctx, name, storagepool, description, nasServer, size, tieringPolicy, hostIOSize, supportedProtocol, isThinEnabled, isDataReductionEnabled
func (_m *UnityClient) CreateFilesystem(ctx context.Context, name string, storagepool string, description string, nasServer string, size uint64, tieringPolicy int, hostIOSize int, supportedProtocol int, isThinEnabled bool, isDataReductionEnabled bool) (*types.Filesystem, error) {
	ret := _m.Called(ctx, name, storagepool, description, nasServer, size, tieringPolicy, hostIOSize, supportedProtocol, isThinEnabled, isDataReductionEnabled)

	if len(ret) == 0 {
		panic("no return value specified for CreateFilesystem")
	}

	var r0 *types.Filesystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, uint64, int, int, int, bool, bool) (*types.Filesystem, error)); ok {
		return rf(ctx, name, storagepool, description, nasServer, size, tieringPolicy, hostIOSize, supportedProtocol, isThinEnabled, isDataReductionEnabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, uint64, int, int, int, bool, bool) *types.Filesystem); ok {
		r0 = rf(ctx, name, storagepool, description, nasServer, size, tieringPolicy, hostIOSize, supportedProtocol, isThinEnabled, isDataReductionEnabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Filesystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, uint64, int, int, int, bool, bool) error); ok {
		r1 = rf(ctx, name, storagepool, description, nasServer, size, tieringPolicy, hostIOSize, supportedProtocol, isThinEnabled, isDataReductionEnabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHost provides a mock function with given fields: ctx, hostName, tenantID
func (_m *UnityClient) CreateHost(ctx context.Context, hostName string, tenantID string) (*types.Host, error) {
	ret := _m.Called(ctx, hostName, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for CreateHost")
	}

	var r0 *types.Host
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.Host, error)); ok {
		return rf(ctx, hostName, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Host); ok {
		r0 = rf(ctx, hostName, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Host)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, hostName, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostIPPort provides a mock function with given fields: ctx, hostID, ip
func (_m *UnityClient) CreateHostIPPort(ctx context.Context, hostID string, ip string) (*types.HostIPPort, error) {
	ret := _m.Called(ctx, hostID, ip)

	if len(ret) == 0 {
		panic("no return value specified for CreateHostIPPort")
	}

	var r0 *types.HostIPPort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.HostIPPort, error)); ok {
		return rf(ctx, hostID, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.HostIPPort); ok {
		r0 = rf(ctx, hostID, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostIPPort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, hostID, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostInitiator provides a mock function with given fields: ctx, hostID, wwnOrIqn, initiatorType
func (_m *UnityClient) CreateHostInitiator(ctx context.Context, hostID string, wwnOrIqn string, initiatorType types.InitiatorType) (*types.HostInitiator, error) {
	ret := _m.Called(ctx, hostID, wwnOrIqn, initiatorType)

	if len(ret) == 0 {
		panic("no return value specified for CreateHostInitiator")
	}

	var r0 *types.HostInitiator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, types.InitiatorType) (*types.HostInitiator, error)); ok {
		return rf(ctx, hostID, wwnOrIqn, initiatorType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, types.InitiatorType) *types.HostInitiator); ok {
		r0 = rf(ctx, hostID, wwnOrIqn, initiatorType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostInitiator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, types.InitiatorType) error); ok {
		r1 = rf(ctx, hostID, wwnOrIqn, initiatorType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLun provides a mock function with given fields: ctx, name, poolID, description, size, fastVPTieringPolicy, hostIOLimitID, isThinEnabled, isDataReductionEnabled
func (_m *UnityClient) CreateLun(ctx context.Context, name string, poolID string, description string, size uint64, fastVPTieringPolicy int, hostIOLimitID string, isThinEnabled bool, isDataReductionEnabled bool) (*types.Volume, error) {
	ret := _m.Called(ctx, name, poolID, description, size, fastVPTieringPolicy, hostIOLimitID, isThinEnabled, isDataReductionEnabled)

	if len(ret) == 0 {
		panic("no return value specified for CreateLun")
	}

	var r0 *types.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, uint64, int, string, bool, bool) (*types.Volume, error)); ok {
		return rf(ctx, name, poolID, description, size, fastVPTieringPolicy, hostIOLimitID, isThinEnabled, isDataReductionEnabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, uint64, int, string, bool, bool) *types.Volume); ok {
		r0 = rf(ctx, name, poolID, description, size, fastVPTieringPolicy, hostIOLimitID, isThinEnabled, isDataReductionEnabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, uint64, int, string, bool, bool) error); ok {
		r1 = rf(ctx, name, poolID, description, size, fastVPTieringPolicy, hostIOLimitID, isThinEnabled, isDataReductionEnabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNFSShare provides a mock function with given fields: ctx, name, path, filesystemID, nfsShareDefaultAccess
func (_m *UnityClient) CreateNFSShare(ctx context.Context, name string, path string, filesystemID string, nfsShareDefaultAccess gounity.NFSShareDefaultAccess) (*types.Filesystem, error) {
	ret := _m.Called(ctx, name, path, filesystemID, nfsShareDefaultAccess)

	if len(ret) == 0 {
		panic("no return value specified for CreateNFSShare")
	}

	var r0 *types.Filesystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gounity.NFSShareDefaultAccess) (*types.Filesystem, error)); ok {
		return rf(ctx, name, path, filesystemID, nfsShareDefaultAccess)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gounity.NFSShareDefaultAccess) *types.Filesystem); ok {
		r0 = rf(ctx, name, path, filesystemID, nfsShareDefaultAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Filesystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gounity.NFSShareDefaultAccess) error); ok {
		r1 = rf(ctx, name, path, filesystemID, nfsShareDefaultAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNFSShareFromSnapshot provides a mock function with given fields: ctx, name, path, snapshotID, nfsShareDefaultAccess
func (_m *UnityClient) CreateNFSShareFromSnapshot(ctx context.Context, name string, path string, snapshotID string, nfsShareDefaultAccess gounity.NFSShareDefaultAccess) (*types.NFSShare, error) {
	ret := _m.Called(ctx, name, path, snapshotID, nfsShareDefaultAccess)

	if len(ret) == 0 {
		panic("no return value specified for CreateNFSShareFromSnapshot")
	}

	var r0 *types.NFSShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gounity.NFSShareDefaultAccess) (*types.NFSShare, error)); ok {
		return rf(ctx, name, path, snapshotID, nfsShareDefaultAccess)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gounity.NFSShareDefaultAccess) *types.NFSShare); ok {
		r0 = rf(ctx, name, path, snapshotID, nfsShareDefaultAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NFSShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gounity.NFSShareDefaultAccess) error); ok {
		r1 = rf(ctx, name, path, snapshotID, nfsShareDefaultAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRealTimeMetricsQuery provides a mock function with given fields: ctx, metricPaths, interval
func (_m *UnityClient) CreateRealTimeMetricsQuery(ctx context.Context, metricPaths []string, interval int) (*types.MetricQueryCreateResponse, error) {
	ret := _m.Called(ctx, metricPaths, interval)

	if len(ret) == 0 {
		panic("no return value specified for CreateRealTimeMetricsQuery")
	}

	var r0 *types.MetricQueryCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int) (*types.MetricQueryCreateResponse, error)); ok {
		return rf(ctx, metricPaths, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int) *types.MetricQueryCreateResponse); ok {
		r0 = rf(ctx, metricPaths, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MetricQueryCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int) error); ok {
		r1 = rf(ctx, metricPaths, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, storageResourceID, snapshotName, description, retentionDuration
func (_m *UnityClient) CreateSnapshot(ctx context.Context, storageResourceID string, snapshotName string, description string, retentionDuration string) (*types.Snapshot, error) {
	ret := _m.Called(ctx, storageResourceID, snapshotName, description, retentionDuration)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*types.Snapshot, error)); ok {
		return rf(ctx, storageResourceID, snapshotName, description, retentionDuration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *types.Snapshot); ok {
		r0 = rf(ctx, storageResourceID, snapshotName, description, retentionDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, storageResourceID, snapshotName, description, retentionDuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotWithFsAccesType provides a mock function with given fields: ctx, storageResourceID, snapshotName, _a3, retentionDuration, filesystemAccessType
func (_m *UnityClient) CreateSnapshotWithFsAccesType(ctx context.Context, storageResourceID string, snapshotName string, _a3 string, retentionDuration string, filesystemAccessType gounity.FilesystemAccessType) (*types.Snapshot, error) {
	ret := _m.Called(ctx, storageResourceID, snapshotName, _a3, retentionDuration, filesystemAccessType)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshotWithFsAccesType")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, gounity.FilesystemAccessType) (*types.Snapshot, error)); ok {
		return rf(ctx, storageResourceID, snapshotName, _a3, retentionDuration, filesystemAccessType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, gounity.FilesystemAccessType) *types.Snapshot); ok {
		r0 = rf(ctx, storageResourceID, snapshotName, _a3, retentionDuration, filesystemAccessType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, gounity.FilesystemAccessType) error); ok {
		r1 = rf(ctx, storageResourceID, snapshotName, _a3, retentionDuration, filesystemAccessType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreteLunThinClone provides a mock function with given fields: ctx, name, snapID, volID
func (_m *UnityClient) CreteLunThinClone(ctx context.Context, name string, snapID string, volID string) (*types.Volume, error) {
	ret := _m.Called(ctx, name, snapID, volID)

	if len(ret) == 0 {
		panic("no return value specified for CreteLunThinClone")
	}

	var r0 *types.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.Volume, error)); ok {
		return rf(ctx, name, snapID, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Volume); ok {
		r0 = rf(ctx, name, snapID, volID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, snapID, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFilesystem provides a mock function with given fields: ctx, filesystemID
func (_m *UnityClient) DeleteFilesystem(ctx context.Context, filesystemID string) error {
	ret := _m.Called(ctx, filesystemID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilesystem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filesystemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFilesystemAsSnapshot provides a mock function with given fields: ctx, snapshotID, sourceFs
func (_m *UnityClient) DeleteFilesystemAsSnapshot(ctx context.Context, snapshotID string, sourceFs *types.Filesystem) error {
	ret := _m.Called(ctx, snapshotID, sourceFs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilesystemAsSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.Filesystem) error); ok {
		r0 = rf(ctx, snapshotID, sourceFs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHost provides a mock function with given fields: ctx, hostName
func (_m *UnityClient) DeleteHost(ctx context.Context, hostName string) error {
	ret := _m.Called(ctx, hostName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, hostName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNFSShare provides a mock function with given fields: ctx, filesystemID, nfsShareID
func (_m *UnityClient) DeleteNFSShare(ctx context.Context, filesystemID string, nfsShareID string) error {
	ret := _m.Called(ctx, filesystemID, nfsShareID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNFSShare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, filesystemID, nfsShareID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNFSShareCreatedFromSnapshot provides a mock function with given fields: ctx, nfsShareID
func (_m *UnityClient) DeleteNFSShareCreatedFromSnapshot(ctx context.Context, nfsShareID string) error {
	ret := _m.Called(ctx, nfsShareID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNFSShareCreatedFromSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nfsShareID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRealTimeMetricsQuery provides a mock function with given fields: ctx, queryID
func (_m *UnityClient) DeleteRealTimeMetricsQuery(ctx context.Context, queryID int) error {
	ret := _m.Called(ctx, queryID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealTimeMetricsQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, queryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSnapshot provides a mock function with given fields: ctx, snapshotID
func (_m *UnityClient) DeleteSnapshot(ctx context.Context, snapshotID string) error {
	ret := _m.Called(ctx, snapshotID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, snapshotID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVolume provides a mock function with given fields: ctx, volumeID
func (_m *UnityClient) DeleteVolume(ctx context.Context, volumeID string) error {
	ret := _m.Called(ctx, volumeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, volumeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpandFilesystem provides a mock function with given fields: ctx, filesystemID, newSize
func (_m *UnityClient) ExpandFilesystem(ctx context.Context, filesystemID string, newSize uint64) error {
	ret := _m.Called(ctx, filesystemID, newSize)

	if len(ret) == 0 {
		panic("no return value specified for ExpandFilesystem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, filesystemID, newSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpandVolume provides a mock function with given fields: ctx, volumeID, newSize
func (_m *UnityClient) ExpandVolume(ctx context.Context, volumeID string, newSize uint64) error {
	ret := _m.Called(ctx, volumeID, newSize)

	if len(ret) == 0 {
		panic("no return value specified for ExpandVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, volumeID, newSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportVolume provides a mock function with given fields: ctx, volID, hostID
func (_m *UnityClient) ExportVolume(ctx context.Context, volID string, hostID string) error {
	ret := _m.Called(ctx, volID, hostID)

	if len(ret) == 0 {
		panic("no return value specified for ExportVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, volID, hostID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFcPortByID provides a mock function with given fields: ctx, fcPortID
func (_m *UnityClient) FindFcPortByID(ctx context.Context, fcPortID string) (*types.FcPort, error) {
	ret := _m.Called(ctx, fcPortID)

	if len(ret) == 0 {
		panic("no return value specified for FindFcPortByID")
	}

	var r0 *types.FcPort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.FcPort, error)); ok {
		return rf(ctx, fcPortID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.FcPort); ok {
		r0 = rf(ctx, fcPortID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FcPort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fcPortID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFilesystemByID provides a mock function with given fields: ctx, filesystemID
func (_m *UnityClient) FindFilesystemByID(ctx context.Context, filesystemID string) (*types.Filesystem, error) {
	ret := _m.Called(ctx, filesystemID)

	if len(ret) == 0 {
		panic("no return value specified for FindFilesystemByID")
	}

	var r0 *types.Filesystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Filesystem, error)); ok {
		return rf(ctx, filesystemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Filesystem); ok {
		r0 = rf(ctx, filesystemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Filesystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filesystemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFilesystemByName provides a mock function with given fields: ctx, filesystemName
func (_m *UnityClient) FindFilesystemByName(ctx context.Context, filesystemName string) (*types.Filesystem, error) {
	ret := _m.Called(ctx, filesystemName)

	if len(ret) == 0 {
		panic("no return value specified for FindFilesystemByName")
	}

	var r0 *types.Filesystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Filesystem, error)); ok {
		return rf(ctx, filesystemName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Filesystem); ok {
		r0 = rf(ctx, filesystemName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Filesystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filesystemName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHostByName provides a mock function with given fields: ctx, hostName
func (_m *UnityClient) FindHostByName(ctx context.Context, hostName string) (*types.Host, error) {
	ret := _m.Called(ctx, hostName)

	if len(ret) == 0 {
		panic("no return value specified for FindHostByName")
	}

	var r0 *types.Host
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Host, error)); ok {
		return rf(ctx, hostName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Host); ok {
		r0 = rf(ctx, hostName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Host)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hostName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHostIOLimitByName provides a mock function with given fields: ctx, hostIoPolicyName
func (_m *UnityClient) FindHostIOLimitByName(ctx context.Context, hostIoPolicyName string) (*types.IoLimitPolicy, error) {
	ret := _m.Called(ctx, hostIoPolicyName)

	if len(ret) == 0 {
		panic("no return value specified for FindHostIOLimitByName")
	}

	var r0 *types.IoLimitPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.IoLimitPolicy, error)); ok {
		return rf(ctx, hostIoPolicyName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.IoLimitPolicy); ok {
		r0 = rf(ctx, hostIoPolicyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IoLimitPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hostIoPolicyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHostIPPortByID provides a mock function with given fields: ctx, hostIPID
func (_m *UnityClient) FindHostIPPortByID(ctx context.Context, hostIPID string) (*types.HostIPPort, error) {
	ret := _m.Called(ctx, hostIPID)

	if len(ret) == 0 {
		panic("no return value specified for FindHostIPPortByID")
	}

	var r0 *types.HostIPPort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.HostIPPort, error)); ok {
		return rf(ctx, hostIPID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.HostIPPort); ok {
		r0 = rf(ctx, hostIPID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostIPPort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hostIPID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHostInitiatorByID provides a mock function with given fields: ctx, wwnOrIqn
func (_m *UnityClient) FindHostInitiatorByID(ctx context.Context, wwnOrIqn string) (*types.HostInitiator, error) {
	ret := _m.Called(ctx, wwnOrIqn)

	if len(ret) == 0 {
		panic("no return value specified for FindHostInitiatorByID")
	}

	var r0 *types.HostInitiator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.HostInitiator, error)); ok {
		return rf(ctx, wwnOrIqn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.HostInitiator); ok {
		r0 = rf(ctx, wwnOrIqn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostInitiator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, wwnOrIqn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHostInitiatorByName provides a mock function with given fields: ctx, wwnOrIqn
func (_m *UnityClient) FindHostInitiatorByName(ctx context.Context, wwnOrIqn string) (*types.HostInitiator, error) {
	ret := _m.Called(ctx, wwnOrIqn)

	if len(ret) == 0 {
		panic("no return value specified for FindHostInitiatorByName")
	}

	var r0 *types.HostInitiator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.HostInitiator, error)); ok {
		return rf(ctx, wwnOrIqn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.HostInitiator); ok {
		r0 = rf(ctx, wwnOrIqn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostInitiator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, wwnOrIqn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHostInitiatorPathByID provides a mock function with given fields: ctx, initiatorPathID
func (_m *UnityClient) FindHostInitiatorPathByID(ctx context.Context, initiatorPathID string) (*types.HostInitiatorPath, error) {
	ret := _m.Called(ctx, initiatorPathID)

	if len(ret) == 0 {
		panic("no return value specified for FindHostInitiatorPathByID")
	}

	var r0 *types.HostInitiatorPath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.HostInitiatorPath, error)); ok {
		return rf(ctx, initiatorPathID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.HostInitiatorPath); ok {
		r0 = rf(ctx, initiatorPathID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostInitiatorPath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, initiatorPathID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNASServerByID provides a mock function with given fields: ctx, nasServerID
func (_m *UnityClient) FindNASServerByID(ctx context.Context, nasServerID string) (*types.NASServer, error) {
	ret := _m.Called(ctx, nasServerID)

	if len(ret) == 0 {
		panic("no return value specified for FindNASServerByID")
	}

	var r0 *types.NASServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.NASServer, error)); ok {
		return rf(ctx, nasServerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.NASServer); ok {
		r0 = rf(ctx, nasServerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NASServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nasServerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNFSShareByID provides a mock function with given fields: ctx, nfsShareID
func (_m *UnityClient) FindNFSShareByID(ctx context.Context, nfsShareID string) (*types.NFSShare, error) {
	ret := _m.Called(ctx, nfsShareID)

	if len(ret) == 0 {
		panic("no return value specified for FindNFSShareByID")
	}

	var r0 *types.NFSShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.NFSShare, error)); ok {
		return rf(ctx, nfsShareID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.NFSShare); ok {
		r0 = rf(ctx, nfsShareID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NFSShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nfsShareID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNFSShareByName provides a mock function with given fields: ctx, nfsSharename
func (_m *UnityClient) FindNFSShareByName(ctx context.Context, nfsSharename string) (*types.NFSShare, error) {
	ret := _m.Called(ctx, nfsSharename)

	if len(ret) == 0 {
		panic("no return value specified for FindNFSShareByName")
	}

	var r0 *types.NFSShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.NFSShare, error)); ok {
		return rf(ctx, nfsSharename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.NFSShare); ok {
		r0 = rf(ctx, nfsSharename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NFSShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nfsSharename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSnapshotByID provides a mock function with given fields: ctx, snapshotID
func (_m *UnityClient) FindSnapshotByID(ctx context.Context, snapshotID string) (*types.Snapshot, error) {
	ret := _m.Called(ctx, snapshotID)

	if len(ret) == 0 {
		panic("no return value specified for FindSnapshotByID")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Snapshot, error)); ok {
		return rf(ctx, snapshotID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Snapshot); ok {
		r0 = rf(ctx, snapshotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapshotID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSnapshotByName provides a mock function with given fields: ctx, snapshotName
func (_m *UnityClient) FindSnapshotByName(ctx context.Context, snapshotName string) (*types.Snapshot, error) {
	ret := _m.Called(ctx, snapshotName)

	if len(ret) == 0 {
		panic("no return value specified for FindSnapshotByName")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Snapshot, error)); ok {
		return rf(ctx, snapshotName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Snapshot); ok {
		r0 = rf(ctx, snapshotName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapshotName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStoragePoolByID provides a mock function with given fields: ctx, poolID
func (_m *UnityClient) FindStoragePoolByID(ctx context.Context, poolID string) (*types.StoragePool, error) {
	ret := _m.Called(ctx, poolID)

	if len(ret) == 0 {
		panic("no return value specified for FindStoragePoolByID")
	}

	var r0 *types.StoragePool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.StoragePool, error)); ok {
		return rf(ctx, poolID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.StoragePool); ok {
		r0 = rf(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StoragePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStoragePoolByName provides a mock function with given fields: ctx, poolName
func (_m *UnityClient) FindStoragePoolByName(ctx context.Context, poolName string) (*types.StoragePool, error) {
	ret := _m.Called(ctx, poolName)

	if len(ret) == 0 {
		panic("no return value specified for FindStoragePoolByName")
	}

	var r0 *types.StoragePool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.StoragePool, error)); ok {
		return rf(ctx, poolName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.StoragePool); ok {
		r0 = rf(ctx, poolName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StoragePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, poolName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTenants provides a mock function with given fields: ctx
func (_m *UnityClient) FindTenants(ctx context.Context) (*types.TenantInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindTenants")
	}

	var r0 *types.TenantInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.TenantInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.TenantInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TenantInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVolumeByID provides a mock function with given fields: ctx, volID
func (_m *UnityClient) FindVolumeByID(ctx context.Context, volID string) (*types.Volume, error) {
	ret := _m.Called(ctx, volID)

	if len(ret) == 0 {
		panic("no return value specified for FindVolumeByID")
	}

	var r0 *types.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Volume, error)); ok {
		return rf(ctx, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Volume); ok {
		r0 = rf(ctx, volID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVolumeByName provides a mock function with given fields: ctx, volName
func (_m *UnityClient) FindVolumeByName(ctx context.Context, volName string) (*types.Volume, error) {
	ret := _m.Called(ctx, volName)

	if len(ret) == 0 {
		panic("no return value specified for FindVolumeByName")
	}

	var r0 *types.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Volume, error)); ok {
		return rf(ctx, volName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Volume); ok {
		r0 = rf(ctx, volName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNFSServers provides a mock function with given fields: ctx
func (_m *UnityClient) GetAllNFSServers(ctx context.Context) (*types.NFSServersResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNFSServers")
	}

	var r0 *types.NFSServersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.NFSServersResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.NFSServersResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NFSServersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRealTimeMetricPaths provides a mock function with given fields: ctx
func (_m *UnityClient) GetAllRealTimeMetricPaths(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRealTimeMetricPaths")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCapacity provides a mock function with given fields: ctx
func (_m *UnityClient) GetCapacity(ctx context.Context) (*types.SystemCapacityMetricsQueryResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacity")
	}

	var r0 *types.SystemCapacityMetricsQueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.SystemCapacityMetricsQueryResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.SystemCapacityMetricsQueryResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SystemCapacityMetricsQueryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilesystemIDFromResID provides a mock function with given fields: ctx, filesystemResID
func (_m *UnityClient) GetFilesystemIDFromResID(ctx context.Context, filesystemResID string) (string, error) {
	ret := _m.Called(ctx, filesystemResID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilesystemIDFromResID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, filesystemResID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, filesystemResID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filesystemResID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxVolumeSize provides a mock function with given fields: ctx, systemLimitID
func (_m *UnityClient) GetMaxVolumeSize(ctx context.Context, systemLimitID string) (*types.MaxVolumSizeInfo, error) {
	ret := _m.Called(ctx, systemLimitID)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxVolumeSize")
	}

	var r0 *types.MaxVolumSizeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.MaxVolumSizeInfo, error)); ok {
		return rf(ctx, systemLimitID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.MaxVolumSizeInfo); ok {
		r0 = rf(ctx, systemLimitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MaxVolumSizeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, systemLimitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricsCollection provides a mock function with given fields: ctx, queryID
func (_m *UnityClient) GetMetricsCollection(ctx context.Context, queryID int) (*types.MetricQueryResult, error) {
	ret := _m.Called(ctx, queryID)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsCollection")
	}

	var r0 *types.MetricQueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*types.MetricQueryResult, error)); ok {
		return rf(ctx, queryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *types.MetricQueryResult); ok {
		r0 = rf(ctx, queryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MetricQueryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, queryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with no fields
func (_m *UnityClient) GetToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ListHostInitiators provides a mock function with given fields: ctx
func (_m *UnityClient) ListHostInitiators(ctx context.Context) ([]types.HostInitiator, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListHostInitiators")
	}

	var r0 []types.HostInitiator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.HostInitiator, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.HostInitiator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.HostInitiator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIscsiIPInterfaces provides a mock function with given fields: ctx
func (_m *UnityClient) ListIscsiIPInterfaces(ctx context.Context) ([]types.IPInterfaceEntries, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListIscsiIPInterfaces")
	}

	var r0 []types.IPInterfaceEntries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.IPInterfaceEntries, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.IPInterfaceEntries); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.IPInterfaceEntries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: ctx, startToken, maxEntries, sourceVolumeID, snapshotID
func (_m *UnityClient) ListSnapshots(ctx context.Context, startToken int, maxEntries int, sourceVolumeID string, snapshotID string) ([]types.Snapshot, int, error) {
	ret := _m.Called(ctx, startToken, maxEntries, sourceVolumeID, snapshotID)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 []types.Snapshot
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) ([]types.Snapshot, int, error)); ok {
		return rf(ctx, startToken, maxEntries, sourceVolumeID, snapshotID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) []types.Snapshot); ok {
		r0 = rf(ctx, startToken, maxEntries, sourceVolumeID, snapshotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) int); ok {
		r1 = rf(ctx, startToken, maxEntries, sourceVolumeID, snapshotID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, string, string) error); ok {
		r2 = rf(ctx, startToken, maxEntries, sourceVolumeID, snapshotID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListVolumes provides a mock function with given fields: ctx, startToken, maxEntries
func (_m *UnityClient) ListVolumes(ctx context.Context, startToken int, maxEntries int) ([]types.Volume, int, error) {
	ret := _m.Called(ctx, startToken, maxEntries)

	if len(ret) == 0 {
		panic("no return value specified for ListVolumes")
	}

	var r0 []types.Volume
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]types.Volume, int, error)); ok {
		return rf(ctx, startToken, maxEntries)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []types.Volume); ok {
		r0 = rf(ctx, startToken, maxEntries)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, startToken, maxEntries)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, startToken, maxEntries)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ModifyHostInitiator provides a mock function with given fields: ctx, hostID, initiator
func (_m *UnityClient) ModifyHostInitiator(ctx context.Context, hostID string, initiator *types.HostInitiator) (*types.HostInitiator, error) {
	ret := _m.Called(ctx, hostID, initiator)

	if len(ret) == 0 {
		panic("no return value specified for ModifyHostInitiator")
	}

	var r0 *types.HostInitiator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.HostInitiator) (*types.HostInitiator, error)); ok {
		return rf(ctx, hostID, initiator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.HostInitiator) *types.HostInitiator); ok {
		r0 = rf(ctx, hostID, initiator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostInitiator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *types.HostInitiator) error); ok {
		r1 = rf(ctx, hostID, initiator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyHostInitiatorByID provides a mock function with given fields: ctx, hostID, initiatorID
func (_m *UnityClient) ModifyHostInitiatorByID(ctx context.Context, hostID string, initiatorID string) (*types.HostInitiator, error) {
	ret := _m.Called(ctx, hostID, initiatorID)

	if len(ret) == 0 {
		panic("no return value specified for ModifyHostInitiatorByID")
	}

	var r0 *types.HostInitiator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.HostInitiator, error)); ok {
		return rf(ctx, hostID, initiatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.HostInitiator); ok {
		r0 = rf(ctx, hostID, initiatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HostInitiator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, hostID, initiatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyNFSShareCreatedFromSnapshotHostAccess provides a mock function with given fields: ctx, nfsShareID, hostIDs, accessType
func (_m *UnityClient) ModifyNFSShareCreatedFromSnapshotHostAccess(ctx context.Context, nfsShareID string, hostIDs []string, accessType gounity.AccessType) error {
	ret := _m.Called(ctx, nfsShareID, hostIDs, accessType)

	if len(ret) == 0 {
		panic("no return value specified for ModifyNFSShareCreatedFromSnapshotHostAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, gounity.AccessType) error); ok {
		r0 = rf(ctx, nfsShareID, hostIDs, accessType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyNFSShareHostAccess provides a mock function with given fields: ctx, filesystemID, nfsShareID, hostIDs, accessType
func (_m *UnityClient) ModifyNFSShareHostAccess(ctx context.Context, filesystemID string, nfsShareID string, hostIDs []string, accessType gounity.AccessType) error {
	ret := _m.Called(ctx, filesystemID, nfsShareID, hostIDs, accessType)

	if len(ret) == 0 {
		panic("no return value specified for ModifyNFSShareHostAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, gounity.AccessType) error); ok {
		r0 = rf(ctx, filesystemID, nfsShareID, hostIDs, accessType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifySnapshot provides a mock function with given fields: ctx, snapshotID, description, retentionDuration
func (_m *UnityClient) ModifySnapshot(ctx context.Context, snapshotID string, description string, retentionDuration string) error {
	ret := _m.Called(ctx, snapshotID, description, retentionDuration)

	if len(ret) == 0 {
		panic("no return value specified for ModifySnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, snapshotID, description, retentionDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifySnapshotAutoDeleteParameter provides a mock function with given fields: ctx, snapshotID
func (_m *UnityClient) ModifySnapshotAutoDeleteParameter(ctx context.Context, snapshotID string) error {
	ret := _m.Called(ctx, snapshotID)

	if len(ret) == 0 {
		panic("no return value specified for ModifySnapshotAutoDeleteParameter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, snapshotID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyVolumeExport provides a mock function with given fields: ctx, volID, hostIDList
func (_m *UnityClient) ModifyVolumeExport(ctx context.Context, volID string, hostIDList []string) error {
	ret := _m.Called(ctx, volID, hostIDList)

	if len(ret) == 0 {
		panic("no return value specified for ModifyVolumeExport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, volID, hostIDList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameVolume provides a mock function with given fields: ctx, newName, volID
func (_m *UnityClient) RenameVolume(ctx context.Context, newName string, volID string) error {
	ret := _m.Called(ctx, newName, volID)

	if len(ret) == 0 {
		panic("no return value specified for RenameVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, newName, volID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *UnityClient) SetToken(token string) {
	_m.Called(token)
}

// UnexportVolume provides a mock function with given fields: ctx, volID
func (_m *UnityClient) UnexportVolume(ctx context.Context, volID string) error {
	ret := _m.Called(ctx, volID)

	if len(ret) == 0 {
		panic("no return value specified for UnexportVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, volID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUnityClient creates a new instance of UnityClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnityClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *UnityClient {
	mock := &UnityClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
