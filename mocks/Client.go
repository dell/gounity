// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, path, headers, resp
func (_m *Client) Delete(ctx context.Context, path string, headers map[string]string, resp interface{}) error {
	ret := _m.Called(ctx, path, headers, resp)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) error); ok {
		r0 = rf(ctx, path, headers, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoAndGetResponseBody provides a mock function with given fields: ctx, method, path, headers, body
func (_m *Client) DoAndGetResponseBody(ctx context.Context, method string, path string, headers map[string]string, body interface{}) (*http.Response, error) {
	ret := _m.Called(ctx, method, path, headers, body)

	if len(ret) == 0 {
		panic("no return value specified for DoAndGetResponseBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, interface{}) (*http.Response, error)); ok {
		return rf(ctx, method, path, headers, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, interface{}) *http.Response); ok {
		r0 = rf(ctx, method, path, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string, interface{}) error); ok {
		r1 = rf(ctx, method, path, headers, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoWithHeaders provides a mock function with given fields: ctx, method, uri, headers, body, resp
func (_m *Client) DoWithHeaders(ctx context.Context, method string, uri string, headers map[string]string, body interface{}, resp interface{}) error {
	ret := _m.Called(ctx, method, uri, headers, body, resp)

	if len(ret) == 0 {
		panic("no return value specified for DoWithHeaders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, method, uri, headers, body, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, path, headers, resp
func (_m *Client) Get(ctx context.Context, path string, headers map[string]string, resp interface{}) error {
	ret := _m.Called(ctx, path, headers, resp)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) error); ok {
		r0 = rf(ctx, path, headers, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetToken provides a mock function with no fields
func (_m *Client) GetToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseJSONError provides a mock function with given fields: ctx, r
func (_m *Client) ParseJSONError(ctx context.Context, r *http.Response) error {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for ParseJSONError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Response) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Post provides a mock function with given fields: ctx, path, headers, body, resp
func (_m *Client) Post(ctx context.Context, path string, headers map[string]string, body interface{}, resp interface{}) error {
	ret := _m.Called(ctx, path, headers, body, resp)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, path, headers, body, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, path, headers, body, resp
func (_m *Client) Put(ctx context.Context, path string, headers map[string]string, body interface{}, resp interface{}) error {
	ret := _m.Called(ctx, path, headers, body, resp)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, path, headers, body, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *Client) SetToken(token string) {
	_m.Called(token)
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
